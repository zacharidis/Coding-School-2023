@page "/itemlist"
@using GZFuel.Blazor.Shared.DTO.Item;
@inject HttpClient httpClient;
@inject NavigationManager NavigationManager;




<h3>Item List</h3>

@if (isLoading)
{
	<div class="spinner-border text-primary" role="status">
		<span class="sr-only">Loading...</span>
	</div>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>
					ID
				</th>
				<th>
					Code
				</th>
				<th>
					Description
				</th>
				<th>
					Price
				</th>
				<th>
					Cost
				</th>

				<th>
					Product Type
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in items)
			{
				<tr>
					<td>
						@item.ID
					</td>
					<td>
						@item.Code
					</td>
					<td>
						@item.Description
					</td>
					<td>
						@item.Price
					</td>

					<td>
						@item.Cost
					</td>

					<td> 
                       @item.ItemType
					</td>

					<td>
						<button class="btn btn-primary" @onclick="() => EditItem(item.Id)">Edit</button>
						<button class="btn btn-danger" @onclick="() => DeleteItem(item.Id)">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
	
}

@code {
	private Boolean isLoading = true;
	private IEnumerable<ItemDTO> items;


	protected override async Task OnInitializedAsync()
	{
		await LoadItems();

	}


private async Task LoadItems()
	{
		items = await httpClient.GetFromJsonAsync<List<ItemDTO>>("item");
		isLoading = false;

	}


     private void EditItem(int id)
	{
		NavigationManager.NavigateTo($"/item/{id}");
	}


private async Task DeleteItem(int id)
	{
		await httpClient.DeleteAsync($"item/{id}");
		await LoadItems();
	}


}

@page "/customerlist/customeredit/{Id:int?}"
@using GZFuel.Blazor.Shared.DTO.Customer;
@using GZFuel.Model.Entities;
@inject HttpClient httpClient;
@inject NavigationManager NavigationManager;


<h3>Customer Edit</h3>

@if (isLoading)
{
	<p>Loading ... </p>
} else
{

	<div class="row">

		<div class="col-md-6">

			<label class="form-label"> Name </label>
			<input class="form-control" @bind="@customer.Name" />


		</div>

		<div class="col-md-6">

			<label class="form-label"> Surname </label>
			<input class="form-control" @bind="@customer.Surname" />


		</div>

		<div class="col-md-6">

			<label class="form-label"> Card Number </label>
			<input class="form-control" @bind="@customer.CardNumber" disabled />
		</div>




	</div>

	<div class="row">

		<div class="col-md-12">

			<button class="btn btn-primary" @onclick="SaveItem">Save</button>

		</div>

		<div class="col-md-12">

			<button class="btn btn-danger" @onclick="OnCancel">Cancel</button>

		</div>
	</div>
	}

@if(hasTransactions)
{
	<p> List of Transactions </p>

	<div class="row">
		<div class="col-md-12">

			<h3>Transactions</h3>

			<table class="table table-sm">

				<thead>

					<tr>

						<th>Id</th>

						<th>Total Value</th>

						<th>Payment Method</th>

						<th>Customer Id</th>

						<th>Employee Id</th>

					</tr>

				</thead>

				<tbody>

					@foreach (var transaction in transactions)

					{

						<tr>

							<td>@transaction.ID</td>

							<td>@transaction.TotalValue</td>

							<td>@transaction.PaymentMethod</td>



							<td>@transaction.CustomerID</td>

							<td>@transaction.EmployeeID</td>

						</tr>

					}

				</tbody>

			</table>

		</div>
	</div>




}


	










@code {
	[Parameter] public int? Id { get; set; }
	CustomerEditDTO customer{ get; set; }
	IEnumerable<Transaction> transactions { get; set; }


	private Boolean isLoading = true;
	private Boolean hasTransactions = false;

	private async Task LoadItemsFromServer()
	{

		if (Id == null)
		{
			customer = new();
		}
		else
		{

			customer = await httpClient.GetFromJsonAsync<CustomerEditDTO>($"customer/{Id}");
			int cusId = customer.Id;

			transactions = await httpClient.GetFromJsonAsync<IEnumerable<Transaction>>($"transaction/{Id}");
			hasTransactions = true;

		}


	}


	protected override async Task OnInitializedAsync()
	{

		await LoadItemsFromServer();
        isLoading = false;

		
	}


	private void OnCancel()
	{
		NavigationManager.NavigateTo("/customerlist");
	}

	private async Task SaveItem()

	     
	{
		if (Id==null)
		{
			String cardNumber = CardGenerator();

			customer.CardNumber = cardNumber;

			var response = await httpClient.PostAsJsonAsync("Customer", customer);
			response.EnsureSuccessStatusCode();
			NavigationManager.NavigateTo("/customerlist");


		}
		else
		{
			var response = 	await httpClient.PutAsJsonAsync($"Customer", customer);
			response.EnsureSuccessStatusCode();
			NavigationManager.NavigateTo("/customerlist");
		}
		
	}


	public string CardGenerator()
	{
		Random random = new Random();
		string cardNumber = 'A' + random.Next(100000000, 999999999).ToString();
		return cardNumber;
	}


	
	//Load the transactions of this specific customer 

    //private async Task LoadTransactionsFromServer()

	//TODO load the transactions - if any - 


}
